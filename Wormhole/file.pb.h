// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#ifndef PROTOBUF_file_2eproto__INCLUDED
#define PROTOBUF_file_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_file_2eproto();
void protobuf_AssignDesc_file_2eproto();
void protobuf_ShutdownFile_file_2eproto();

class FileMessage;
class FilePartMessage;
class MimeMessage;

enum MessageType {
  FILE_MESSAGE = 1,
  FILE_PART_MESSAGE = 2,
  MIME_MESSAGE = 3
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = FILE_MESSAGE;
const MessageType MessageType_MAX = MIME_MESSAGE;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class FileMessage : public ::google::protobuf::Message {
 public:
  FileMessage();
  virtual ~FileMessage();

  FileMessage(const FileMessage& from);

  inline FileMessage& operator=(const FileMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileMessage& default_instance();

  void Swap(FileMessage* other);

  // implements Message ----------------------------------------------

  FileMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileMessage& from);
  void MergeFrom(const FileMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required uint64 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // required uint32 parts_count = 3;
  inline bool has_parts_count() const;
  inline void clear_parts_count();
  static const int kPartsCountFieldNumber = 3;
  inline ::google::protobuf::uint32 parts_count() const;
  inline void set_parts_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FileMessage)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_parts_count();
  inline void clear_has_parts_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filename_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint32 parts_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();

  void InitAsDefaultInstance();
  static FileMessage* default_instance_;
};
// -------------------------------------------------------------------

class FilePartMessage : public ::google::protobuf::Message {
 public:
  FilePartMessage();
  virtual ~FilePartMessage();

  FilePartMessage(const FilePartMessage& from);

  inline FilePartMessage& operator=(const FilePartMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilePartMessage& default_instance();

  void Swap(FilePartMessage* other);

  // implements Message ----------------------------------------------

  FilePartMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilePartMessage& from);
  void MergeFrom(const FilePartMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::uint64 length() const;
  inline void set_length(::google::protobuf::uint64 value);

  // optional uint32 checksum = 3;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 3;
  inline ::google::protobuf::uint32 checksum() const;
  inline void set_checksum(::google::protobuf::uint32 value);

  // optional bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:FilePartMessage)
 private:
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 length_;
  ::std::string* content_;
  ::google::protobuf::uint32 checksum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();

  void InitAsDefaultInstance();
  static FilePartMessage* default_instance_;
};
// -------------------------------------------------------------------

class MimeMessage : public ::google::protobuf::Message {
 public:
  MimeMessage();
  virtual ~MimeMessage();

  MimeMessage(const MimeMessage& from);

  inline MimeMessage& operator=(const MimeMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MimeMessage& default_instance();

  void Swap(MimeMessage* other);

  // implements Message ----------------------------------------------

  MimeMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MimeMessage& from);
  void MergeFrom(const MimeMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline float version() const;
  inline void set_version(float value);

  // required string content_type = 2;
  inline bool has_content_type() const;
  inline void clear_content_type();
  static const int kContentTypeFieldNumber = 2;
  inline const ::std::string& content_type() const;
  inline void set_content_type(const ::std::string& value);
  inline void set_content_type(const char* value);
  inline void set_content_type(const char* value, size_t size);
  inline ::std::string* mutable_content_type();
  inline ::std::string* release_content_type();
  inline void set_allocated_content_type(::std::string* content_type);

  // required uint64 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint64 length() const;
  inline void set_length(::google::protobuf::uint64 value);

  // optional bytes body = 4;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 4;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:MimeMessage)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_content_type();
  inline void clear_has_content_type();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_type_;
  ::google::protobuf::uint64 length_;
  ::std::string* body_;
  float version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_file_2eproto();
  friend void protobuf_AssignDesc_file_2eproto();
  friend void protobuf_ShutdownFile_file_2eproto();

  void InitAsDefaultInstance();
  static MimeMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// FileMessage

// optional string filename = 1;
inline bool FileMessage::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileMessage::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileMessage::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileMessage::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& FileMessage::filename() const {
  return *filename_;
}
inline void FileMessage::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void FileMessage::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void FileMessage::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileMessage::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* FileMessage::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FileMessage::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 size = 2;
inline bool FileMessage::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileMessage::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileMessage::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileMessage::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 FileMessage::size() const {
  return size_;
}
inline void FileMessage::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// required uint32 parts_count = 3;
inline bool FileMessage::has_parts_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileMessage::set_has_parts_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileMessage::clear_has_parts_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileMessage::clear_parts_count() {
  parts_count_ = 0u;
  clear_has_parts_count();
}
inline ::google::protobuf::uint32 FileMessage::parts_count() const {
  return parts_count_;
}
inline void FileMessage::set_parts_count(::google::protobuf::uint32 value) {
  set_has_parts_count();
  parts_count_ = value;
}

// -------------------------------------------------------------------

// FilePartMessage

// required uint64 length = 2;
inline bool FilePartMessage::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilePartMessage::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilePartMessage::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilePartMessage::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::uint64 FilePartMessage::length() const {
  return length_;
}
inline void FilePartMessage::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
}

// optional uint32 checksum = 3;
inline bool FilePartMessage::has_checksum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilePartMessage::set_has_checksum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilePartMessage::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilePartMessage::clear_checksum() {
  checksum_ = 0u;
  clear_has_checksum();
}
inline ::google::protobuf::uint32 FilePartMessage::checksum() const {
  return checksum_;
}
inline void FilePartMessage::set_checksum(::google::protobuf::uint32 value) {
  set_has_checksum();
  checksum_ = value;
}

// optional bytes content = 4;
inline bool FilePartMessage::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FilePartMessage::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FilePartMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FilePartMessage::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& FilePartMessage::content() const {
  return *content_;
}
inline void FilePartMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void FilePartMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void FilePartMessage::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilePartMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* FilePartMessage::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FilePartMessage::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MimeMessage

// optional float version = 1;
inline bool MimeMessage::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MimeMessage::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MimeMessage::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MimeMessage::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline float MimeMessage::version() const {
  return version_;
}
inline void MimeMessage::set_version(float value) {
  set_has_version();
  version_ = value;
}

// required string content_type = 2;
inline bool MimeMessage::has_content_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MimeMessage::set_has_content_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MimeMessage::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MimeMessage::clear_content_type() {
  if (content_type_ != &::google::protobuf::internal::kEmptyString) {
    content_type_->clear();
  }
  clear_has_content_type();
}
inline const ::std::string& MimeMessage::content_type() const {
  return *content_type_;
}
inline void MimeMessage::set_content_type(const ::std::string& value) {
  set_has_content_type();
  if (content_type_ == &::google::protobuf::internal::kEmptyString) {
    content_type_ = new ::std::string;
  }
  content_type_->assign(value);
}
inline void MimeMessage::set_content_type(const char* value) {
  set_has_content_type();
  if (content_type_ == &::google::protobuf::internal::kEmptyString) {
    content_type_ = new ::std::string;
  }
  content_type_->assign(value);
}
inline void MimeMessage::set_content_type(const char* value, size_t size) {
  set_has_content_type();
  if (content_type_ == &::google::protobuf::internal::kEmptyString) {
    content_type_ = new ::std::string;
  }
  content_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MimeMessage::mutable_content_type() {
  set_has_content_type();
  if (content_type_ == &::google::protobuf::internal::kEmptyString) {
    content_type_ = new ::std::string;
  }
  return content_type_;
}
inline ::std::string* MimeMessage::release_content_type() {
  clear_has_content_type();
  if (content_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_type_;
    content_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MimeMessage::set_allocated_content_type(::std::string* content_type) {
  if (content_type_ != &::google::protobuf::internal::kEmptyString) {
    delete content_type_;
  }
  if (content_type) {
    set_has_content_type();
    content_type_ = content_type;
  } else {
    clear_has_content_type();
    content_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 length = 3;
inline bool MimeMessage::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MimeMessage::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MimeMessage::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MimeMessage::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::uint64 MimeMessage::length() const {
  return length_;
}
inline void MimeMessage::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
}

// optional bytes body = 4;
inline bool MimeMessage::has_body() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MimeMessage::set_has_body() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MimeMessage::clear_has_body() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MimeMessage::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& MimeMessage::body() const {
  return *body_;
}
inline void MimeMessage::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void MimeMessage::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void MimeMessage::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MimeMessage::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* MimeMessage::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MimeMessage::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageType>() {
  return ::MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_file_2eproto__INCLUDED
